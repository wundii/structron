<?php

declare(strict_types=1);

namespace Wundii\Structron\Resolver;

use Symfony\Component\Filesystem\Filesystem;
use Wundii\Structron\Config\OptionEnum;
use Wundii\Structron\Config\StructronConfig;
use Wundii\Structron\Dto\ColumnsMaxLength;
use Wundii\Structron\Dto\StructronCollectionDto;
use Wundii\Structron\Enum\StructronRowTypEnum;

final readonly class StructronDocsResolver
{
    public function __construct(
        private StructronConfig $structronConfig,
        private Filesystem $filesystem,
    ) {
    }

    public function resolve(StructronCollectionDto $structronCollectionDto): bool
    {
        $docPath = $this->structronConfig->getString(OptionEnum::DOC_PATH);
        $dtoPaths = $this->structronConfig->getArrayWithStrings(OptionEnum::PATHS);
        $phpExtension = $this->structronConfig->getString(OptionEnum::PHP_EXTENSION);
        $directoryPath = getcwd() . DIRECTORY_SEPARATOR . $docPath;
        $markdownStructronFile = $directoryPath . DIRECTORY_SEPARATOR . '/_Structron.md';

        if (! $this->filesystem->exists($directoryPath)) {
            $this->filesystem->mkdir($directoryPath, 0755);
        }

        $structronFileContent = '# Structron Documentation' . PHP_EOL;
        $structronFileContent .= 'This documentation is automatically generated by Structron.' . PHP_EOL . PHP_EOL;
        $structronFileContent .= '## Files' . PHP_EOL;

        foreach ($structronCollectionDto->getStructronFileDtos() as $structronFileDto) {

            $basename = basename($structronFileDto->getPathname());
            $nativeName = str_replace('.' . $phpExtension, '', $basename);

            $folder = str_replace($dtoPaths, [''], $structronFileDto->getPathname());
            $folder = str_replace(getcwd() . DIRECTORY_SEPARATOR, '', $folder);
            $folder = str_replace($basename, '', $folder);
            $folder = substr($folder, 1);

            $directoryPathDocs = getcwd() . DIRECTORY_SEPARATOR . $docPath . DIRECTORY_SEPARATOR . $folder;
            if (! $this->filesystem->exists($directoryPathDocs)) {
                $this->filesystem->mkdir($directoryPathDocs, 0755);
            }


            $columnsMaxLength = new ColumnsMaxLength();

            foreach ($structronFileDto->getCollection() as $structronRowDto) {
                $columnsMaxLength->name = max($columnsMaxLength->name, strlen($structronRowDto->getName()));
                $columnsMaxLength->type = max($columnsMaxLength->type, strlen($structronRowDto->getType()));
                $columnsMaxLength->default = max($columnsMaxLength->default, strlen($structronRowDto->getDefault()));
                $columnsMaxLength->description = max($columnsMaxLength->description, strlen($structronRowDto->getDescription()));
            }

            $fileContent = '# ' . $structronFileDto->getClassname() . PHP_EOL;
            $fileContent .= '- [Back to Structron Documentation](' . $markdownStructronFile . ')' . PHP_EOL;
            $fileContent .= '- [Go to ' . $basename . '](' . $structronFileDto->getPathname() . ')' . PHP_EOL . PHP_EOL;
            foreach ($structronFileDto->getDescriptions() as $description) {
                $fileContent .= $description . PHP_EOL . PHP_EOL;
            }

            foreach ($structronFileDto->getCollection() as $structronRowDto) {
                if ($structronRowDto->getStructronRowTypEnum() === StructronRowTypEnum::HEADER) {
                    $fileContent .= '| ' . str_pad($structronRowDto->getName(), $columnsMaxLength->name) . ' | ';
                    $fileContent .= str_pad('Type', $columnsMaxLength->type) . ' | ';
                    $fileContent .= str_pad('Default', $columnsMaxLength->default) . ' | ';
                    $fileContent .= str_pad('Description', $columnsMaxLength->description) . ' |' . PHP_EOL;

                    $fileContent .= '| ' . str_repeat('-', $columnsMaxLength->name) . ' | ';
                    $fileContent .= str_repeat('-', $columnsMaxLength->type) . ' | ';
                    $fileContent .= str_repeat('-', $columnsMaxLength->default) . ' | ';
                    $fileContent .= str_repeat('-', $columnsMaxLength->description) . ' |' . PHP_EOL;

                    continue;
                }

                $name = $structronRowDto->getStructronRowTypEnum() === StructronRowTypEnum::SUBHEADER
                    ? '**' . $structronRowDto->getName() . '**'
                    : $structronRowDto->getName();

                $fileContent .= '| ' . str_pad($name, $columnsMaxLength->name) . ' | ';
                $fileContent .= str_pad($structronRowDto->getType(), $columnsMaxLength->type) . ' | ';
                $fileContent .= str_pad($structronRowDto->getDefault(), $columnsMaxLength->default) . ' | ';
                $fileContent .= str_pad($structronRowDto->getDescription(), $columnsMaxLength->description) . ' |' . PHP_EOL;
            }

            $markdownFile = $directoryPathDocs . DIRECTORY_SEPARATOR . sprintf('/%s.md', $nativeName);
            file_put_contents($markdownFile, $fileContent);
            $this->filesystem->chmod($markdownFile, 0755);

            $structronFileContent .= '- [' . $structronFileDto->getClassname() . '](' . $folder . $nativeName . '.md)' . PHP_EOL;
        }

        file_put_contents($markdownStructronFile, $structronFileContent);
        $this->filesystem->chmod($markdownStructronFile, 0755);

        return true;
    }
}
